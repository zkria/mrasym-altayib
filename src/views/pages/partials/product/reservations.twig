{#
| المتغيرات                | النوع   | الوصف                     |
|---------------------------|---------|---------------------------|
| reservations              | مصفوفة  | قائمة الحجوزات           |
#}
<div class="reservations-calendar bg-white rounded-lg shadow-sm p-4">
    {# عرض التقويم الشهري #}
    <div class="calendar-header flex justify-between items-center mb-4">
        <button class="calendar-nav" data-direction="prev">
            <i class="sicon-keyboard_arrow_right"></i>
        </button>
        
        <h3 class="text-lg font-bold" id="calendar-month"></h3>
        
        <button class="calendar-nav" data-direction="next">
            <i class="sicon-keyboard_arrow_left"></i>
        </button>
    </div>

    {# أيام الأسبوع #}
    <div class="calendar-days grid grid-cols-7 gap-1 mb-2 text-center">
        {% for day in ['أحد','اثنين','ثلاثاء','أربعاء','خميس','جمعة','سبت'] %}
            <div class="text-sm font-medium text-gray-600">{{ day }}</div>
        {% endfor %}
    </div>

    {# خلايا التقويم #}
    <div class="calendar-grid grid grid-cols-7 gap-1" id="calendar-body">
        {# سيتم ملؤها بواسطة JavaScript #}
    </div>
</div>

{# قائمة الحجوزات لليوم المحدد #}
<div class="day-reservations mt-6 hidden" id="day-reservations">
    <h4 class="text-lg font-bold mb-4" id="selected-date"></h4>
    
    <div class="space-y-3" id="reservations-list">
        {% for reservation in reservations %}
            <div class="reservation-slot bg-gray-50 rounded-lg p-4 hover:bg-gray-100 transition-all"
                 data-date="{{ reservation.day }}"
                 data-time-from="{{ reservation.from_timestamp }}"
                 data-time-to="{{ reservation.to_timestamp }}">
                
                <div class="flex justify-between items-center">
                    {# وقت الحجز #}
                    <div class="flex items-center gap-2">
                        <i class="sicon-clock text-primary"></i>
                        <span class="text-sm">
                            {{ reservation.from|number({'PM':'م', 'AM':'ص'}) }}
                            -
                            {{ reservation.to|number({'PM':'م', 'AM':'ص'}) }}
                        </span>
                    </div>

                    {# حالة الحجز #}
                    <span class="status-badge"></span>
                </div>

                {# معلومات إضافية #}
                <div class="mt-3 text-sm text-gray-600">
                    <div class="flex items-center gap-2">
                        <i class="sicon-user"></i>
                        <span class="available-slots">
                            {{ reservation.available_slots ?? 'غير محدود' }}
                        </span>
                    </div>
                </div>
            </div>
        {% endfor %}
    </div>
</div>

<style>
.calendar-grid .day {
    aspect-ratio: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    border-radius: 0.5rem;
    transition: all 0.3s ease;
}

.calendar-grid .day:hover {
    background-color: var(--color-primary-50);
}

.calendar-grid .day.active {
    background-color: var(--color-primary);
    color: white;
}

.calendar-grid .day.has-reservations {
    position: relative;
}

.calendar-grid .day.has-reservations::after {
    content: '';
    position: absolute;
    bottom: 4px;
    width: 4px;
    height: 4px;
    border-radius: 50%;
    background-color: var(--color-primary);
}

.status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 500;
}

.status-badge.available {
    background-color: var(--color-success-50);
    color: var(--color-success-700);
}

.status-badge.booked {
    background-color: var(--color-danger-50);
    color: var(--color-danger-700);
}
</style>

<script>
class ReservationsCalendar {
    constructor() {
        this.currentDate = new Date();
        this.selectedDate = null;
        this.reservations = [];
        this.init();
    }

    init() {
        this.loadReservations();
        this.renderCalendar();
        this.attachEventListeners();
    }

    loadReservations() {
        // تحميل الحجوزات من العنصر
        const slots = document.querySelectorAll('.reservation-slot');
        slots.forEach(slot => {
            this.reservations.push({
                date: new Date(slot.dataset.date),
                timeFrom: slot.dataset.timeFrom,
                timeTo: slot.dataset.timeTo
            });
        });
    }

    renderCalendar() {
        const firstDay = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1);
        const lastDay = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + 1, 0);
        
        // تحديث عنوان الشهر
        document.getElementById('calendar-month').textContent = 
            this.currentDate.toLocaleDateString('ar-SA', { month: 'long', year: 'numeric' });

        // إنشاء خلايا التقويم
        const calendarBody = document.getElementById('calendar-body');
        calendarBody.innerHTML = '';

        // إضافة الأيام الفارغة في بداية الشهر
        for(let i = 0; i < firstDay.getDay(); i++) {
            calendarBody.appendChild(this.createDayElement());
        }

        // إضافة أيام الشهر
        for(let day = 1; day <= lastDay.getDate(); day++) {
            const date = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), day);
            const hasReservations = this.hasReservationsOnDate(date);
            
            calendarBody.appendChild(
                this.createDayElement(day, date, hasReservations)
            );
        }
    }

    createDayElement(day = '', date = null, hasReservations = false) {
        const div = document.createElement('div');
        div.className = 'day';
        div.textContent = day;

        if(date) {
            div.dataset.date = date.toISOString();
            if(hasReservations) div.classList.add('has-reservations');
            if(this.isSameDay(date, this.selectedDate)) div.classList.add('active');
        }

        return div;
    }

    hasReservationsOnDate(date) {
        return this.reservations.some(res => this.isSameDay(new Date(res.date), date));
    }

    isSameDay(d1, d2) {
        if(!d1 || !d2) return false;
        return d1.getDate() === d2.getDate() &&
               d1.getMonth() === d2.getMonth() &&
               d1.getFullYear() === d2.getFullYear();
    }

    attachEventListeners() {
        // التنقل بين الشهور
        document.querySelectorAll('.calendar-nav').forEach(btn => {
            btn.addEventListener('click', () => {
                const direction = btn.dataset.direction === 'prev' ? -1 : 1;
                this.currentDate.setMonth(this.currentDate.getMonth() + direction);
                this.renderCalendar();
            });
        });

        // اختيار يوم
        document.getElementById('calendar-body').addEventListener('click', (e) => {
            if(e.target.classList.contains('day') && e.target.dataset.date) {
                this.selectDate(new Date(e.target.dataset.date));
            }
        });
    }

    selectDate(date) {
        this.selectedDate = date;
        this.renderCalendar();
        this.showDayReservations(date);
    }

    showDayReservations(date) {
        const dayReservations = document.getElementById('day-reservations');
        const reservationsList = document.getElementById('reservations-list');
        
        // تحديث العنوان
        document.getElementById('selected-date').textContent = 
            date.toLocaleDateString('ar-SA', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });

        // عرض الحجوزات لليوم المحدد
        const slots = document.querySelectorAll('.reservation-slot');
        slots.forEach(slot => {
            const slotDate = new Date(slot.dataset.date);
            slot.style.display = this.isSameDay(slotDate, date) ? 'block' : 'none';
        });

        dayReservations.classList.remove('hidden');
    }
}

// تهيئة التقويم
document.addEventListener('DOMContentLoaded', () => {
    new ReservationsCalendar();
});
</script>